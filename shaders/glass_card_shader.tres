[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

uniform sampler2D bg : hint_albedo;

uniform float bg_hue = 0.0;

uniform sampler2D decal_1 : hint_albedo;
uniform sampler2D decal_2 : hint_albedo;
uniform sampler2D decal_3 : hint_albedo;
uniform sampler2D decal_4 : hint_albedo;

uniform float b_scale = 1.0;
uniform float v_offset = 0.0;
uniform int decal_bits = 0;
uniform bool has_debug_tint = false;
uniform float fade_c = 0.0;

uniform float glass_fade = 0.0;

uniform vec4 debug_tint : hint_color;
uniform vec4 tint : hint_color;

uniform sampler2D label : hint_albedo;

uniform bool has_viewport = false;

vec3 hueShift( vec3 color, float hueAdjust ){

    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);
    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);
    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);

    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);
    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);
    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);

    float   YPrime  = dot (color, kRGBToYPrime);
    float   I       = dot (color, kRGBToI);
    float   Q       = dot (color, kRGBToQ);
    float   hue     = atan (Q, I);
    float   chroma  = sqrt (I * I + Q * Q);

    hue += hueAdjust;

    Q = chroma * sin (hue);
    I = chroma * cos (hue);

    vec3    yIQ   = vec3 (YPrime, I, Q);

    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );

}

void fragment() {
	ALBEDO = hueShift(texture(bg, UV).rgb, bg_hue);
	// glass effect ???
	ALPHA = 0.1 + (1.0 - glass_fade) * 0.9;
	ALBEDO = mix(ALBEDO, vec3(0.2, 0.2, 0.2), glass_fade);
	ROUGHNESS = 0.6;
	// ALPHA = 1.0;
	
	if ((decal_bits & 1) > 0 && b_scale < 12.0) {
		vec4 color = texture(decal_1, clamp(UV * b_scale + vec2((1.0 - b_scale) / 2.0, (1.0 - b_scale) / 2.0 + v_offset * (1.0 - b_scale)) , vec2(0.0), vec2(1.0)));
		ALBEDO = mix(ALBEDO, color.rgb, color.a);
		ALPHA += color.a;
	}
	if ((decal_bits & 2) > 0 && b_scale < 12.0) {
		vec4 color = texture(decal_2, UV * b_scale + vec2((1.0 - b_scale) / 2.0, (1.0 - b_scale) / 2.0 + v_offset * (1.0 - b_scale)));
		ALBEDO = mix(ALBEDO, color.rgb, color.a);
		ALPHA += color.a;
	}
	if ((decal_bits & 4) > 0 && b_scale < 12.0) {
		vec4 color = texture(decal_3, UV * b_scale + vec2((1.0 - b_scale) / 2.0, (1.0 - b_scale) / 2.0 + v_offset * (1.0 - b_scale)));
		ALBEDO = mix(ALBEDO, color.rgb, color.a);
		ALPHA += color.a;
	}
	if ((decal_bits & 8) > 0 && b_scale < 12.0) {
		vec4 color = texture(decal_4, UV * b_scale + vec2((1.0 - b_scale) / 2.0, (1.0 - b_scale) / 2.0 + v_offset * (1.0 - b_scale)));
		ALBEDO = mix(ALBEDO, color.rgb, color.a);
		ALPHA += color.a;
//		ROUGHNESS = 0.0;
//		if (color.a > 0.0) {
//		NORMALMAP = vec3(1.0 - color.z)
//		}
	}
	if (fade_c > 0.0 && UV.y < 0.19 && UV.y > 0.07 && UV.x > 0.07 && UV.x < 0.93) {
		 // vec4 color = texture(tex3, UV);
		ALBEDO = mix(ALBEDO, tint.rgb, fade_c);
		ALPHA += fade_c;
		
	}
	
	if (has_viewport) {
	    vec4 tex = texture(label, vec2(UV.x, UV.y));
		ALBEDO = mix(ALBEDO, tex.rgb, tex.a * fade_c);
		ALPHA += tex.a * fade_c;
//		if (tex.a * fade_c > 0.0) {
//			 ROUGHNESS = 1.0 - tex.a * fade_c;
//			 METALLIC = 1.0 - tex.a * fade_c;
//		}
	}
		
	if (has_debug_tint) {
		ALBEDO = debug_tint.rgb;
	}
// glass part 2
	ALPHA = clamp(ALPHA, 0.0, 1.0);
//	if (ALPHA <= 0.2) {
//		ALBEDO = vec3(0.5, 0.5, 0.6);
//		ROUGHNESS = 0.0;
//		METALLIC = 0.0;
//	}
}"
